{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(dplyr)\n\nshinyServer(function(input, output, session) {\n\n\n  ##################################### Reactive UI Output ######################################### \n  output$sliderControl <- renderUI({\n    num_bdays <- as.numeric(input$bdays)\n    sliderInput(inputId = \"animate\", label = \"Start\",\n                min = 0, max = num_bdays, value = 0, step = 1, animate = TRUE)\n  })\n\n  \n  ##################################### Data Functions ############################################ \n  \n  # Initiate reactive value (v), v$bdays is a vector of randomly generated birthdays (1-365)\n  v <- reactiveValues(bdays = c(), counts = data.frame(), current = \"\", matches = \"\", total = \"\")\n  \n  observeEvent(input$animate, {\n    if (input$animate != 0) {\n      new_bday <- sample(1:365, (input$animate/input$animate), replace = TRUE)\n      v$bdays <- v$bdays %>% append(new_bday)\n      v$current <- cal_df[match(new_bday, cal_df$num), 3]\n    }\n  })\n  \n  observeEvent(input$reset,  {\n    v$bdays <- c()\n    v$counts <- data.frame()\n    v$current <- \"\"\n    updateSliderInput(session, \"animate\", value = 0)\n  })\n  \n  update_counts <- reactive({\n    bdays <- v$bdays\n    counts <- table(bdays)\n    counts <- as.data.frame(counts)\n    counts$day <- cal_df[match(counts$bdays, cal_df$num), 2]\n    counts$month <- cal_df[match(counts$bdays, cal_df$num), 1]\n    counts$month <- factor(counts$month, levels=month.abb)\n    return(counts)\n  })\n  \n  bday_df <- reactive({\n    df <- start_df\n    counts <- update_counts()\n    df$count <- counts[match(df$num, counts$bdays, nomatch = NA_integer_), 2] \n    df <- mutate(df, day = ifelse(!is.na(count), counts[match(df$num, counts$bdays), 3], day),\n                 month = ifelse(!is.na(count), counts[match(df$num, counts$bdays), 4], month))\n    # df <- mutate(df, month = ifelse(!is.na(count), counts[match(df$num, counts$bdays), 4], month))\n    \n    matches <- df %>% filter(count > 1) %>% select(count)\n    v$matches <- length(matches$count)\n    v$total <- sum(as.numeric(df$count), na.rm = TRUE)\n\n\n#     df$day <- counts[match(df$num, counts$bdays), 3]\n#     df$month <- counts[match(df$num, counts$bdays), 4]\n#     df$month <- factor(df$month, levels=month.abb)\n \n\n    \n#     df$month[df$count != 0] <- cal_df[match(df$num, cal_df$num), 1] %>% as.numeric()\n#     df$day[df$count != 0] <- cal_df[match(df$num, cal_df$num), 2] %>% as.numeric()\n#     df$count <- df$count %>% as.character()\n    \n    \n#     df$day <- as.numeric(df$day)\n#     df$month <- as.numeric(df$month)\n    df$count <- as.character(df$count)\n\n#     counts <- update_counts()\n#     df$count <- counts[match(df$num, counts$bdays), 2] %>% as.character()\n#     df$month <- cal_df[match(df$num, cal_df$num), 1] %>% as.numeric()\n#     df$day <- cal_df[match(df$num, cal_df$num), 2] %>% as.numeric()\n    \n    \n    df <- df %>%\n      select(name, day, month, count)\n    return(df)\n  })\n  \n  \n  ##################################### Plot & Table Output ######################################### \n  output$table <- renderTable({\n    bday_df()\n  })\n  \n  output$text <- renderUI({\n    str1 <- h3(paste0(\"Date: \", v$current))\n    str2 <- h6(paste0(\"Generated: \", v$total))\n    str3 <- h6(paste0(\"Matches: \", v$matches))\n    HTML(paste0(str1, str2, str3, sep = '<br/>'))\n\n  })\n  \n\n  \n  output$chart <- reactive({\n    list(data = googleDataTable(bday_df()),\n         options = list(\n           title = paste0(\"Calendar Grid\"),\n           series = series,\n           legend = 'none',\n           fontName = \"Source Sans Pro\",\n           backgroundColor = \"transparent\",\n           fontSize = 12, \n           hAxis = list(\n             viewWindow = xlim,\n             ticks = seq(1, 31, 1)\n           ),\n           vAxis = list(\n             viewWindow = ylim,\n             direction = -1, \n             ticks = seq(1, 12, 1)\n           ),\n           sizeAxis = list(\n             maxSize = 12\n           ),\n           chartArea = list(\n             top = 25, left = 25, bottom = 50, right = 25,\n             height = \"80%\", width = \"90%\"\n           ),\n           bubble = list(\n             opacity = 0.8, \n             textStyle = list(\n               color = \"white\",\n               fontSize = 8\n             )\n           ),\n           animation = list(\n#              \"duration\" = 600,\n#              \"easing\" = \"inAndOut\"\n           )\n         ))\n  })\n  \n  \n\n})\n",
    "created" : 1456425979315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3644239141",
    "id" : "41A0DF98",
    "lastKnownWriteTime" : 1457029632,
    "path" : "~/Development/susan/probability/birthday_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}